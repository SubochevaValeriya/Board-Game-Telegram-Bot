/*
 * Tesera API
 *
 * API for Tesera
 *
 * API version: v1
 * Contact:
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"fmt"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type TradeApiService service

/*
TradeApiService Activate advert to purchasing a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param optional nil or *TradeApiActivatePurchaseOpts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiActivatePurchaseOpts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) ActivatePurchase(ctx context.Context, id int64, localVarOptionals *TradeApiActivatePurchaseOpts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/purchases/{id}/activate"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Activate advert to purchasing a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param version
 * @param optional nil or *TradeApiActivatePurchase_1Opts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiActivatePurchase_1Opts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) ActivatePurchase_1(ctx context.Context, id int64, version string, localVarOptionals *TradeApiActivatePurchase_1Opts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/purchases/{id}/activate"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Activate advert to sell a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param optional nil or *TradeApiActivateSaleOpts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiActivateSaleOpts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) ActivateSale(ctx context.Context, id int64, localVarOptionals *TradeApiActivateSaleOpts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/sales/{id}/activate"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Activate advert to sell a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param version
 * @param optional nil or *TradeApiActivateSale_2Opts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiActivateSale_2Opts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) ActivateSale_2(ctx context.Context, id int64, version string, localVarOptionals *TradeApiActivateSale_2Opts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/sales/{id}/activate"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Add advert to purchasing a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *TradeApiAddPurchaseOpts - Optional Parameters:
     * @param "Model" (optional.Interface of AddAdvertModel) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiAddPurchaseOpts struct {
	Model                             optional.Interface
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) AddPurchase(ctx context.Context, localVarOptionals *TradeApiAddPurchaseOpts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/purchases"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Model.IsSet() {

		localVarOptionalModel, localVarOptionalModelok := localVarOptionals.Model.Value().(AddAdvertModel)
		if !localVarOptionalModelok {
			return localVarReturnValue, nil, reportError("model should be AddAdvertModel")
		}
		localVarPostBody = &localVarOptionalModel
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Add advert to purchasing a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param version
 * @param optional nil or *TradeApiAddPurchase_3Opts - Optional Parameters:
     * @param "Model" (optional.Interface of AddAdvertModel) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiAddPurchase_3Opts struct {
	Model                             optional.Interface
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) AddPurchase_3(ctx context.Context, version string, localVarOptionals *TradeApiAddPurchase_3Opts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/purchases"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Model.IsSet() {

		localVarOptionalModel, localVarOptionalModelok := localVarOptionals.Model.Value().(AddAdvertModel)
		if !localVarOptionalModelok {
			return localVarReturnValue, nil, reportError("model should be AddAdvertModel")
		}
		localVarPostBody = &localVarOptionalModel
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Add advert to sell a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *TradeApiAddSaleOpts - Optional Parameters:
     * @param "Model" (optional.Interface of AddAdvertModel) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiAddSaleOpts struct {
	Model                             optional.Interface
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) AddSale(ctx context.Context, localVarOptionals *TradeApiAddSaleOpts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/sales"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Model.IsSet() {

		localVarOptionalModel, localVarOptionalModelok := localVarOptionals.Model.Value().(AddAdvertModel)
		if !localVarOptionalModelok {
			return localVarReturnValue, nil, reportError("model should be AddAdvertModel")
		}
		localVarPostBody = &localVarOptionalModel
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Add advert to sell a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param version
 * @param optional nil or *TradeApiAddSale_4Opts - Optional Parameters:
     * @param "Model" (optional.Interface of AddAdvertModel) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiAddSale_4Opts struct {
	Model                             optional.Interface
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) AddSale_4(ctx context.Context, version string, localVarOptionals *TradeApiAddSale_4Opts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/sales"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Model.IsSet() {

		localVarOptionalModel, localVarOptionalModelok := localVarOptionals.Model.Value().(AddAdvertModel)
		if !localVarOptionalModelok {
			return localVarReturnValue, nil, reportError("model should be AddAdvertModel")
		}
		localVarPostBody = &localVarOptionalModel
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Archieve advert to purchasing a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param optional nil or *TradeApiArchievePurchaseOpts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiArchievePurchaseOpts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) ArchievePurchase(ctx context.Context, id int64, localVarOptionals *TradeApiArchievePurchaseOpts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/purchases/{id}/archive"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Archieve advert to purchasing a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param version
 * @param optional nil or *TradeApiArchievePurchase_5Opts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiArchievePurchase_5Opts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) ArchievePurchase_5(ctx context.Context, id int64, version string, localVarOptionals *TradeApiArchievePurchase_5Opts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/purchases/{id}/archive"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Archieve advert to sell a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param optional nil or *TradeApiArchieveSaleOpts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiArchieveSaleOpts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) ArchieveSale(ctx context.Context, id int64, localVarOptionals *TradeApiArchieveSaleOpts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/sales/{id}/archive"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Archieve advert to sell a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param version
 * @param optional nil or *TradeApiArchieveSale_6Opts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiArchieveSale_6Opts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) ArchieveSale_6(ctx context.Context, id int64, version string, localVarOptionals *TradeApiArchieveSale_6Opts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/sales/{id}/archive"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Delete advert purchasing by advertId
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Advert id
 * @param optional nil or *TradeApiDeletePurchaseOpts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -


*/

type TradeApiDeletePurchaseOpts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) DeletePurchase(ctx context.Context, id int64, localVarOptionals *TradeApiDeletePurchaseOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/purchases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
TradeApiService Delete advert purchasing by relationId
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param relationId Relation id
 * @param optional nil or *TradeApiDeletePurchaseByRelationOpts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -


*/

type TradeApiDeletePurchaseByRelationOpts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) DeletePurchaseByRelation(ctx context.Context, relationId int64, localVarOptionals *TradeApiDeletePurchaseByRelationOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/purchases/{relationid}/relation"
	localVarPath = strings.Replace(localVarPath, "{"+"relationId"+"}", fmt.Sprintf("%v", relationId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
TradeApiService Delete advert purchasing by relationId
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param relationId Relation id
 * @param version
 * @param optional nil or *TradeApiDeletePurchaseByRelation_7Opts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -


*/

type TradeApiDeletePurchaseByRelation_7Opts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) DeletePurchaseByRelation_7(ctx context.Context, relationId int64, version string, localVarOptionals *TradeApiDeletePurchaseByRelation_7Opts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/purchases/{relationid}/relation"
	localVarPath = strings.Replace(localVarPath, "{"+"relationId"+"}", fmt.Sprintf("%v", relationId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
TradeApiService Delete advert purchasing by advertId
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Advert id
 * @param version
 * @param optional nil or *TradeApiDeletePurchase_8Opts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -


*/

type TradeApiDeletePurchase_8Opts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) DeletePurchase_8(ctx context.Context, id int64, version string, localVarOptionals *TradeApiDeletePurchase_8Opts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/purchases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
TradeApiService Delete advert sell by advId
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Advert id
 * @param optional nil or *TradeApiDeleteSaleOpts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -


*/

type TradeApiDeleteSaleOpts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) DeleteSale(ctx context.Context, id int64, localVarOptionals *TradeApiDeleteSaleOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/sales/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
TradeApiService Delete advert sell by relationId
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param relationId Relation id
 * @param optional nil or *TradeApiDeleteSaleByRelationOpts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -


*/

type TradeApiDeleteSaleByRelationOpts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) DeleteSaleByRelation(ctx context.Context, relationId int64, localVarOptionals *TradeApiDeleteSaleByRelationOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/sales/{relationid}/relation"
	localVarPath = strings.Replace(localVarPath, "{"+"relationId"+"}", fmt.Sprintf("%v", relationId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
TradeApiService Delete advert sell by relationId
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param relationId Relation id
 * @param version
 * @param optional nil or *TradeApiDeleteSaleByRelation_9Opts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -


*/

type TradeApiDeleteSaleByRelation_9Opts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) DeleteSaleByRelation_9(ctx context.Context, relationId int64, version string, localVarOptionals *TradeApiDeleteSaleByRelation_9Opts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/sales/{relationid}/relation"
	localVarPath = strings.Replace(localVarPath, "{"+"relationId"+"}", fmt.Sprintf("%v", relationId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
TradeApiService Delete advert sell by advId
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Advert id
 * @param version
 * @param optional nil or *TradeApiDeleteSale_10Opts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -


*/

type TradeApiDeleteSale_10Opts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) DeleteSale_10(ctx context.Context, id int64, version string, localVarOptionals *TradeApiDeleteSale_10Opts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/sales/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
TradeApiService Delete all purchases for user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param gameAlias Alias game
 * @param optional nil or *TradeApiDeleteUserGamePurchasesOpts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -


*/

type TradeApiDeleteUserGamePurchasesOpts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) DeleteUserGamePurchases(ctx context.Context, gameAlias string, localVarOptionals *TradeApiDeleteUserGamePurchasesOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/purchases/{gamealias}/all"
	localVarPath = strings.Replace(localVarPath, "{"+"gameAlias"+"}", fmt.Sprintf("%v", gameAlias), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
TradeApiService Delete all purchases for user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param gameAlias Alias game
 * @param version
 * @param optional nil or *TradeApiDeleteUserGamePurchases_11Opts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -


*/

type TradeApiDeleteUserGamePurchases_11Opts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) DeleteUserGamePurchases_11(ctx context.Context, gameAlias string, version string, localVarOptionals *TradeApiDeleteUserGamePurchases_11Opts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/purchases/{gamealias}/all"
	localVarPath = strings.Replace(localVarPath, "{"+"gameAlias"+"}", fmt.Sprintf("%v", gameAlias), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
TradeApiService Delete all sales for user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param gameAlias Alias game
 * @param optional nil or *TradeApiDeleteUserGameSalesOpts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -


*/

type TradeApiDeleteUserGameSalesOpts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) DeleteUserGameSales(ctx context.Context, gameAlias string, localVarOptionals *TradeApiDeleteUserGameSalesOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/sales/{gamealias}/all"
	localVarPath = strings.Replace(localVarPath, "{"+"gameAlias"+"}", fmt.Sprintf("%v", gameAlias), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
TradeApiService Delete all sales for user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param gameAlias Alias game
 * @param version
 * @param optional nil or *TradeApiDeleteUserGameSales_12Opts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -


*/

type TradeApiDeleteUserGameSales_12Opts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) DeleteUserGameSales_12(ctx context.Context, gameAlias string, version string, localVarOptionals *TradeApiDeleteUserGameSales_12Opts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/sales/{gamealias}/all"
	localVarPath = strings.Replace(localVarPath, "{"+"gameAlias"+"}", fmt.Sprintf("%v", gameAlias), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
TradeApiService Messages belonged to advert
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Advert id
 * @param optional nil or *TradeApiGetMessagesPurchaseOpts - Optional Parameters:
     * @param "Offset" (optional.Int32) -
     * @param "Limit" (optional.Int32) -
     * @param "Sort" (optional.String) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return MessagesByObjectResponse
*/

type TradeApiGetMessagesPurchaseOpts struct {
	Offset                            optional.Int32
	Limit                             optional.Int32
	Sort                              optional.String
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) GetMessagesPurchase(ctx context.Context, id int64, localVarOptionals *TradeApiGetMessagesPurchaseOpts) (MessagesByObjectResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue MessagesByObjectResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/purchases/{id}/messages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("Offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("Limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("Sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v MessagesByObjectResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Messages belonged to advert
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Advert id
 * @param version
 * @param optional nil or *TradeApiGetMessagesPurchase_13Opts - Optional Parameters:
     * @param "Offset" (optional.Int32) -
     * @param "Limit" (optional.Int32) -
     * @param "Sort" (optional.String) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return MessagesByObjectResponse
*/

type TradeApiGetMessagesPurchase_13Opts struct {
	Offset                            optional.Int32
	Limit                             optional.Int32
	Sort                              optional.String
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) GetMessagesPurchase_13(ctx context.Context, id int64, version string, localVarOptionals *TradeApiGetMessagesPurchase_13Opts) (MessagesByObjectResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue MessagesByObjectResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/purchases/{id}/messages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("Offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("Limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("Sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v MessagesByObjectResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Messages belonged to a sell
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Advert id
 * @param optional nil or *TradeApiGetMessagesSaleOpts - Optional Parameters:
     * @param "Offset" (optional.Int32) -
     * @param "Limit" (optional.Int32) -
     * @param "Sort" (optional.String) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return MessagesByObjectResponse
*/

type TradeApiGetMessagesSaleOpts struct {
	Offset                            optional.Int32
	Limit                             optional.Int32
	Sort                              optional.String
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) GetMessagesSale(ctx context.Context, id int64, localVarOptionals *TradeApiGetMessagesSaleOpts) (MessagesByObjectResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue MessagesByObjectResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/sales/{id}/messages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("Offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("Limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("Sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v MessagesByObjectResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Messages belonged to a sell
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Advert id
 * @param version
 * @param optional nil or *TradeApiGetMessagesSale_14Opts - Optional Parameters:
     * @param "Offset" (optional.Int32) -
     * @param "Limit" (optional.Int32) -
     * @param "Sort" (optional.String) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return MessagesByObjectResponse
*/

type TradeApiGetMessagesSale_14Opts struct {
	Offset                            optional.Int32
	Limit                             optional.Int32
	Sort                              optional.String
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) GetMessagesSale_14(ctx context.Context, id int64, version string, localVarOptionals *TradeApiGetMessagesSale_14Opts) (MessagesByObjectResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue MessagesByObjectResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/sales/{id}/messages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("Offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("Limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("Sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v MessagesByObjectResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Get advert for purchase by Id
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param optional nil or *TradeApiGetPurchaseOpts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiGetPurchaseOpts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) GetPurchase(ctx context.Context, id int64, localVarOptionals *TradeApiGetPurchaseOpts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/purchases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Get advert for purchase by Id
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param version
 * @param optional nil or *TradeApiGetPurchase_15Opts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiGetPurchase_15Opts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) GetPurchase_15(ctx context.Context, id int64, version string, localVarOptionals *TradeApiGetPurchase_15Opts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/purchases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService List of adverts for purchase of board games
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *TradeApiGetPurchasesOpts - Optional Parameters:
     * @param "Game" (optional.String) -
     * @param "Country" (optional.String) -
     * @param "City" (optional.String) -
     * @param "Condition" (optional.String) -
     * @param "My" (optional.String) -
     * @param "User" (optional.String) -
     * @param "GroupStatus" (optional.String) -
     * @param "Sort" (optional.String) -
     * @param "Offset" (optional.Int32) -
     * @param "Limit" (optional.Int32) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return []AdvertInfo
*/

type TradeApiGetPurchasesOpts struct {
	Game                              optional.String
	Country                           optional.String
	City                              optional.String
	Condition                         optional.String
	My                                optional.String
	User                              optional.String
	GroupStatus                       optional.String
	Sort                              optional.String
	Offset                            optional.Int32
	Limit                             optional.Int32
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) GetPurchases(ctx context.Context, localVarOptionals *TradeApiGetPurchasesOpts) ([]AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/purchases"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Game.IsSet() {
		localVarQueryParams.Add("Game", parameterToString(localVarOptionals.Game.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Country.IsSet() {
		localVarQueryParams.Add("Country", parameterToString(localVarOptionals.Country.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.City.IsSet() {
		localVarQueryParams.Add("City", parameterToString(localVarOptionals.City.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Condition.IsSet() {
		localVarQueryParams.Add("Condition", parameterToString(localVarOptionals.Condition.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.My.IsSet() {
		localVarQueryParams.Add("My", parameterToString(localVarOptionals.My.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.User.IsSet() {
		localVarQueryParams.Add("User", parameterToString(localVarOptionals.User.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GroupStatus.IsSet() {
		localVarQueryParams.Add("GroupStatus", parameterToString(localVarOptionals.GroupStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("Sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("Offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("Limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService List of adverts for purchase of board games
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param version
 * @param optional nil or *TradeApiGetPurchases_16Opts - Optional Parameters:
     * @param "Game" (optional.String) -
     * @param "Country" (optional.String) -
     * @param "City" (optional.String) -
     * @param "Condition" (optional.String) -
     * @param "My" (optional.String) -
     * @param "User" (optional.String) -
     * @param "GroupStatus" (optional.String) -
     * @param "Sort" (optional.String) -
     * @param "Offset" (optional.Int32) -
     * @param "Limit" (optional.Int32) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return []AdvertInfo
*/

type TradeApiGetPurchases_16Opts struct {
	Game                              optional.String
	Country                           optional.String
	City                              optional.String
	Condition                         optional.String
	My                                optional.String
	User                              optional.String
	GroupStatus                       optional.String
	Sort                              optional.String
	Offset                            optional.Int32
	Limit                             optional.Int32
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) GetPurchases_16(ctx context.Context, version string, localVarOptionals *TradeApiGetPurchases_16Opts) ([]AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/purchases"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Game.IsSet() {
		localVarQueryParams.Add("Game", parameterToString(localVarOptionals.Game.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Country.IsSet() {
		localVarQueryParams.Add("Country", parameterToString(localVarOptionals.Country.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.City.IsSet() {
		localVarQueryParams.Add("City", parameterToString(localVarOptionals.City.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Condition.IsSet() {
		localVarQueryParams.Add("Condition", parameterToString(localVarOptionals.Condition.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.My.IsSet() {
		localVarQueryParams.Add("My", parameterToString(localVarOptionals.My.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.User.IsSet() {
		localVarQueryParams.Add("User", parameterToString(localVarOptionals.User.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GroupStatus.IsSet() {
		localVarQueryParams.Add("GroupStatus", parameterToString(localVarOptionals.GroupStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("Sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("Offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("Limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Get advert for sale by Id
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param optional nil or *TradeApiGetSaleOpts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiGetSaleOpts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) GetSale(ctx context.Context, id int64, localVarOptionals *TradeApiGetSaleOpts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/sales/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Get advert for sale by Id
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param version
 * @param optional nil or *TradeApiGetSale_17Opts - Optional Parameters:
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiGetSale_17Opts struct {
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) GetSale_17(ctx context.Context, id int64, version string, localVarOptionals *TradeApiGetSale_17Opts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/sales/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService List of adverts for sale of board games
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *TradeApiGetSalesOpts - Optional Parameters:
     * @param "Game" (optional.String) -
     * @param "Country" (optional.String) -
     * @param "City" (optional.String) -
     * @param "Condition" (optional.String) -
     * @param "My" (optional.String) -
     * @param "User" (optional.String) -
     * @param "GroupStatus" (optional.String) -
     * @param "Sort" (optional.String) -
     * @param "Offset" (optional.Int32) -
     * @param "Limit" (optional.Int32) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return []AdvertInfo
*/

type TradeApiGetSalesOpts struct {
	Game                              optional.String
	Country                           optional.String
	City                              optional.String
	Condition                         optional.String
	My                                optional.String
	User                              optional.String
	GroupStatus                       optional.String
	Sort                              optional.String
	Offset                            optional.Int32
	Limit                             optional.Int32
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) GetSales(ctx context.Context, localVarOptionals *TradeApiGetSalesOpts) ([]AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/sales"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Game.IsSet() {
		localVarQueryParams.Add("Game", parameterToString(localVarOptionals.Game.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Country.IsSet() {
		localVarQueryParams.Add("Country", parameterToString(localVarOptionals.Country.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.City.IsSet() {
		localVarQueryParams.Add("City", parameterToString(localVarOptionals.City.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Condition.IsSet() {
		localVarQueryParams.Add("Condition", parameterToString(localVarOptionals.Condition.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.My.IsSet() {
		localVarQueryParams.Add("My", parameterToString(localVarOptionals.My.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.User.IsSet() {
		localVarQueryParams.Add("User", parameterToString(localVarOptionals.User.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GroupStatus.IsSet() {
		localVarQueryParams.Add("GroupStatus", parameterToString(localVarOptionals.GroupStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("Sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("Offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("Limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService List of adverts for sale of board games
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param version
 * @param optional nil or *TradeApiGetSales_18Opts - Optional Parameters:
     * @param "Game" (optional.String) -
     * @param "Country" (optional.String) -
     * @param "City" (optional.String) -
     * @param "Condition" (optional.String) -
     * @param "My" (optional.String) -
     * @param "User" (optional.String) -
     * @param "GroupStatus" (optional.String) -
     * @param "Sort" (optional.String) -
     * @param "Offset" (optional.Int32) -
     * @param "Limit" (optional.Int32) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return []AdvertInfo
*/

type TradeApiGetSales_18Opts struct {
	Game                              optional.String
	Country                           optional.String
	City                              optional.String
	Condition                         optional.String
	My                                optional.String
	User                              optional.String
	GroupStatus                       optional.String
	Sort                              optional.String
	Offset                            optional.Int32
	Limit                             optional.Int32
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) GetSales_18(ctx context.Context, version string, localVarOptionals *TradeApiGetSales_18Opts) ([]AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/sales"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Game.IsSet() {
		localVarQueryParams.Add("Game", parameterToString(localVarOptionals.Game.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Country.IsSet() {
		localVarQueryParams.Add("Country", parameterToString(localVarOptionals.Country.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.City.IsSet() {
		localVarQueryParams.Add("City", parameterToString(localVarOptionals.City.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Condition.IsSet() {
		localVarQueryParams.Add("Condition", parameterToString(localVarOptionals.Condition.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.My.IsSet() {
		localVarQueryParams.Add("My", parameterToString(localVarOptionals.My.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.User.IsSet() {
		localVarQueryParams.Add("User", parameterToString(localVarOptionals.User.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GroupStatus.IsSet() {
		localVarQueryParams.Add("GroupStatus", parameterToString(localVarOptionals.GroupStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("Sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("Offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("Limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Update advert to purchasing a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param optional nil or *TradeApiUpdatePurchaseOpts - Optional Parameters:
     * @param "Model" (optional.Interface of UpdateAdvertModel) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiUpdatePurchaseOpts struct {
	Model                             optional.Interface
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) UpdatePurchase(ctx context.Context, id int64, localVarOptionals *TradeApiUpdatePurchaseOpts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/purchases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Model.IsSet() {

		localVarOptionalModel, localVarOptionalModelok := localVarOptionals.Model.Value().(UpdateAdvertModel)
		if !localVarOptionalModelok {
			return localVarReturnValue, nil, reportError("model should be UpdateAdvertModel")
		}
		localVarPostBody = &localVarOptionalModel
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Update advert to purchasing a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param version
 * @param optional nil or *TradeApiUpdatePurchase_19Opts - Optional Parameters:
     * @param "Model" (optional.Interface of UpdateAdvertModel) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiUpdatePurchase_19Opts struct {
	Model                             optional.Interface
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) UpdatePurchase_19(ctx context.Context, id int64, version string, localVarOptionals *TradeApiUpdatePurchase_19Opts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/purchases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Model.IsSet() {

		localVarOptionalModel, localVarOptionalModelok := localVarOptionals.Model.Value().(UpdateAdvertModel)
		if !localVarOptionalModelok {
			return localVarReturnValue, nil, reportError("model should be UpdateAdvertModel")
		}
		localVarPostBody = &localVarOptionalModel
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Update advert to sell a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param optional nil or *TradeApiUpdateSaleOpts - Optional Parameters:
     * @param "Model" (optional.Interface of UpdateAdvertModel) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiUpdateSaleOpts struct {
	Model                             optional.Interface
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) UpdateSale(ctx context.Context, id int64, localVarOptionals *TradeApiUpdateSaleOpts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trade/sales/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Model.IsSet() {

		localVarOptionalModel, localVarOptionalModelok := localVarOptionals.Model.Value().(UpdateAdvertModel)
		if !localVarOptionalModelok {
			return localVarReturnValue, nil, reportError("model should be UpdateAdvertModel")
		}
		localVarPostBody = &localVarOptionalModel
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TradeApiService Update advert to sell a game
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param version
 * @param optional nil or *TradeApiUpdateSale_20Opts - Optional Parameters:
     * @param "Model" (optional.Interface of UpdateAdvertModel) -
     * @param "IsCancellationRequested" (optional.Bool) -
     * @param "CanBeCanceled" (optional.Bool) -
     * @param "WaitHandleHandle" (optional.Interface of map[string]string) -
     * @param "WaitHandleSafeWaitHandleIsInvalid" (optional.Bool) -
     * @param "WaitHandleSafeWaitHandleIsClosed" (optional.Bool) -

@return AdvertInfo
*/

type TradeApiUpdateSale_20Opts struct {
	Model                             optional.Interface
	IsCancellationRequested           optional.Bool
	CanBeCanceled                     optional.Bool
	WaitHandleHandle                  optional.Interface
	WaitHandleSafeWaitHandleIsInvalid optional.Bool
	WaitHandleSafeWaitHandleIsClosed  optional.Bool
}

func (a *TradeApiService) UpdateSale_20(ctx context.Context, id int64, version string, localVarOptionals *TradeApiUpdateSale_20Opts) (AdvertInfo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AdvertInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v{version}/trade/sales/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", fmt.Sprintf("%v", version), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.IsCancellationRequested.IsSet() {
		localVarQueryParams.Add("IsCancellationRequested", parameterToString(localVarOptionals.IsCancellationRequested.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CanBeCanceled.IsSet() {
		localVarQueryParams.Add("CanBeCanceled", parameterToString(localVarOptionals.CanBeCanceled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleHandle.IsSet() {
		localVarQueryParams.Add("WaitHandle.Handle", parameterToString(localVarOptionals.WaitHandleHandle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsInvalid", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsInvalid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WaitHandleSafeWaitHandleIsClosed.IsSet() {
		localVarQueryParams.Add("WaitHandle.SafeWaitHandle.IsClosed", parameterToString(localVarOptionals.WaitHandleSafeWaitHandleIsClosed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Model.IsSet() {

		localVarOptionalModel, localVarOptionalModelok := localVarOptionals.Model.Value().(UpdateAdvertModel)
		if !localVarOptionalModelok {
			return localVarReturnValue, nil, reportError("model should be UpdateAdvertModel")
		}
		localVarPostBody = &localVarOptionalModel
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AdvertInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
